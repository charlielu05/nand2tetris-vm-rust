@256
D=A
@0
M=D
//push returnAddr
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push lcl
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//push arg
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//push that
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//arg=sp-5-nargs
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
//lcl=sp
@SP
D=M
@LCL
M=D
//goto
@Sys.init
0; JMP
//label
(Sys.init$ret.0)
//function
//label
(Main.fibonacci)
//push argument
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
D=D-M
@TRUE_0
D;JGT
@SP
M=M-1
A=M
M=0
@CONTINUE_0
0;JMP
(TRUE_0)
@SP
M=M-1
A=M
M=-1
(CONTINUE_0)
@SP
M=M+1
//if-goto
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE
//goto
@IF_FALSE
0; JMP
//label
(IF_TRUE)
//push argument
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//frame=LCL
@LCL
D=M
@SP
A=M
M=D
@13
M=D
@SP
M=M-1
//retAddr=*(frame-5
@5
D=A
//frame-5
@R13
D=M-D
A=D
D=M
@14
M=D
//arg=pop()
@SP
A=M
D=M
@ARG
A=M
M=D
//SP=ARG+1
@ARG
D=M
@SP
M=D+1
//THAT=*(frame-1)
@R13
A=M-1
D=M
@THAT
M=D
//THIS=*(frame-2)
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
//ARG=*(frame-3)
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
//LCL=*(frame-4)
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
//goto
@R14
A=M
0; JMP
//label
(IF_FALSE)
//push argument
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
D=M-D
M=D
//push returnAddr
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push lcl
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//push arg
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//push that
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//arg=sp-5-nargs
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
//lcl=sp
@SP
D=M
@LCL
M=D
//goto
@Main.fibonacci
0; JMP
//label
(Main.fibonacci$ret.1)
//push argument
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
D=M-D
M=D
//push returnAddr
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push lcl
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//push arg
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//push that
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//arg=sp-5-nargs
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
//lcl=sp
@SP
D=M
@LCL
M=D
//goto
@Main.fibonacci
0; JMP
//label
(Main.fibonacci$ret.2)
//add
@SP
M=M-1
@SP
A=M
D=M
@SP
A=M-1
D=D+M
M=D
//frame=LCL
@LCL
D=M
@SP
A=M
M=D
@13
M=D
@SP
M=M-1
//retAddr=*(frame-5
@5
D=A
//frame-5
@R13
D=M-D
A=D
D=M
@14
M=D
//arg=pop()
@SP
A=M
D=M
@ARG
A=M
M=D
//SP=ARG+1
@ARG
D=M
@SP
M=D+1
//THAT=*(frame-1)
@R13
A=M-1
D=M
@THAT
M=D
//THIS=*(frame-2)
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
//ARG=*(frame-3)
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
//LCL=*(frame-4)
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
//goto
@R14
A=M
0; JMP
//function
//label
(Sys.init)
// push constant
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//push returnAddr
@Main.fibonacci$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push lcl
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//push arg
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//push that
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//arg=sp-5-nargs
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
//lcl=sp
@SP
D=M
@LCL
M=D
//goto
@Main.fibonacci
0; JMP
//label
(Main.fibonacci$ret.3)
//label
(WHILE)
//goto
@WHILE
0; JMP
